const tetrisWrap = document.querySelector("#tetrisGame");
const playground = tetrisWrap.querySelector(".playground > ul");
const tetrisNumText = tetrisWrap.querySelector(".tetris__count__num");
const tetrisComboText = tetrisWrap.querySelector(".tetris__count__combo");
const tetrisStartBtn = tetrisWrap.querySelector(".tetris__start");

// Î≥ÄÏàòÏÑ§Ï†ï
let tetrisrouws = 15,
    tetriscols = 10;
let tetrisScore = 0,
    tetrisCombo = 0,
    tetrisDuration = 1600,
    tetrisDownInterval;
let tetrisTempMovingItem;
let tetrisSettimeout;
let tetrisEnd = false;
let tetrisDurationTimeout;

// Î∏îÎ°ù Ï†ïÎ≥¥
const tetrisMovingItem = {
    type: "Tmino",
    direction: 0, // Î∏îÎ°ù Î™®Ïñë
    top: 0,
    left: 0,
};

// Î∂àÎ°ù Ï¢åÌëúÍ∞í
const blocks = {
    Tmino: [
        [
            [2, 1],
            [0, 1],
            [1, 0],
            [1, 1],
        ],
        [
            [1, 2],
            [0, 1],
            [1, 0],
            [1, 1],
        ],
        [
            [1, 2],
            [0, 1],
            [2, 1],
            [1, 1],
        ],
        [
            [2, 1],
            [1, 2],
            [1, 0],
            [1, 1],
        ],
    ],
    Imino: [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
        ],
        [
            [0, 0],
            [1, 0],
            [2, 0],
            [3, 0],
        ],
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
        ],
        [
            [0, 0],
            [1, 0],
            [2, 0],
            [3, 0],
        ],
    ],
    Omino: [
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
        ],
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
        ],
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
        ],
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
        ],
    ],
    Zmino: [
        [
            [0, 0],
            [1, 0],
            [1, 1],
            [2, 1],
        ],
        [
            [1, 0],
            [0, 1],
            [1, 1],
            [0, 2],
        ],
        [
            [0, 0],
            [1, 0],
            [1, 1],
            [2, 1],
        ],
        [
            [1, 0],
            [0, 1],
            [1, 1],
            [0, 2],
        ],
    ],
    Smino: [
        [
            [1, 0],
            [2, 0],
            [0, 1],
            [1, 1],
        ],
        [
            [0, 0],
            [0, 1],
            [1, 1],
            [1, 2],
        ],
        [
            [1, 0],
            [2, 0],
            [0, 1],
            [1, 1],
        ],
        [
            [0, 0],
            [0, 1],
            [1, 1],
            [1, 2],
        ],
    ],
    Jmino: [
        [
            [0, 2],
            [1, 0],
            [1, 1],
            [1, 2],
        ],
        [
            [0, 0],
            [0, 1],
            [1, 1],
            [2, 1],
        ],
        [
            [0, 0],
            [1, 0],
            [0, 1],
            [0, 2],
        ],
        [
            [0, 0],
            [1, 0],
            [2, 0],
            [2, 1],
        ],
    ],
    Lmino: [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 2],
        ],
        [
            [0, 0],
            [1, 0],
            [2, 0],
            [0, 1],
        ],
        [
            [0, 0],
            [1, 0],
            [1, 1],
            [1, 2],
        ],
        [
            [0, 1],
            [1, 1],
            [2, 0],
            [2, 1],
        ],
    ],
};

// ÏãúÏûëÌïòÍ∏∞
function init() {
    tetrisTempMovingItem = { ...tetrisMovingItem }; // Í∞ùÏ≤¥ ÏïàÏùò Îç∞Ïù¥ÌÑ∞Îßå Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÏùå

    playground.innerHTML = '';
    for (i = 0; i < tetrisrouws; i++) {
        prependNewLine();
    }
    prependNewLine(); // Î∏îÎ°ù ÎùºÏù∏ ÎßåÎì§Í∏∞
    tetrisEnd = false;
    tetrisDuration = 1600;
    tetrisScore = 0;
    tetrisCombo=0;
    clearInterval(tetrisDurationTimeout)
    // renderBlocks(); // Î∏îÎ°ù Ï∂úÎ†•ÌïòÍ∏∞
    generateNewBlcok(); //Î∏îÎü≠ ÏÉàÎßåÎì§Í∏∞(ÎëêÎ≤àÏß∏Î∂ÄÌÑ∞ ÏûêÎèôÎÇ¥Î†§Í∞êÏãúÏûëÎêòÎØÄÎ°ú ÏãúÏûëÌï†Îïå ÌïúÎ≤à Ïã§ÌñâÏ§ë)
    tetrisDurationTimeout = setInterval(()=>{
        tetrisDuration += -200;
        tetrisDuration <= 120 ? clearInterval(tetrisDurationTimeout) : null
        console.log(tetrisDuration)
    },15000)
    
}

// Î∏îÎ°ù ÎßåÎì§Í∏∞
function prependNewLine() {
    const li = document.createElement("li"); //ÏóòÎ¶¨Î®ºÌä∏ ÎßåÎì§Í∏∞
    const ul = document.createElement("ul");
    for (j = 0; j < tetriscols; j++) {
        const matrix = document.createElement("li");
        ul.prepend(matrix);
    }

    li.prepend(ul);
    playground.prepend(li);
}

// Î∏îÎ°ù Ï∂úÎ†•ÌïòÍ∏∞
function renderBlocks(moveType = "") {
    if(tetrisEnd){return}
    // console.log('Î∏îÎ°ùÏ∂úÎ†•ÌïòÍ∏∞')
    // const ty = tetrisTempMovingItem.type;
    // const di = tetrisTempMovingItem.direction;
    // const to = tetrisTempMovingItem.top;
    // const le = tetrisTempMovingItem.left;

    const { type, direction, top, left } = tetrisTempMovingItem;
    const movingBlocks = document.querySelectorAll(".moving");
    movingBlocks.forEach((moving) => {
        moving.classList.remove(type, "moving");
    });

    blocks[type][direction].some((block) => {
        //foreachÏôÄ Í∞ôÏù¥ Î∞òÎ≥µÎ¨∏Ïù∏Îç∞ Ïï†Îäî Ï§ëÍ∞ÑÏä§ÌÉëÏù¥ Í∞ÄÎä•
        const x = block[0] + left; //xÏ¢åÌëú
        const y = block[1] + top; //yÏ¢åÌëú

        const target = playground.childNodes[y] ? playground.childNodes[y].childNodes[0].childNodes[x] : null;
        const isAvailable = checkEmpty(target);

        if (isAvailable) {
            target.classList.add(type, "moving");
        } else {
            tetrisTempMovingItem = { ...tetrisMovingItem };

            clearTimeout(tetrisSettimeout)
            tetrisSettimeout = setTimeout(() => {
                renderBlocks();
                if (moveType === "top") {
                    seizeBlock();
                }
            }, 0);
            return true;
        }
    });
    tetrisMovingItem.left = left;
    tetrisMovingItem.top = top;
    tetrisMovingItem.direction = direction;
}

// Î∏îÎ°ù Í∞êÏßÄÌïòÍ∏∞
function seizeBlock() {
    // console.log('Î∏îÎ°ùÍ∞êÏßÄÌïòÍ∏∞')
    let xx = playground.querySelector("ul > li > ul");
    let xxx = xx.querySelectorAll("li");
    xxx.forEach((e) => {
        if (e.classList.contains("seized")) {
            tetrisEndfunc()
            return;

        }else{
            // console.log('Í∞êÏßÄÌÜµÍ≥º')
        }
    });
    const movingBlocks = document.querySelectorAll(".moving");
    movingBlocks.forEach((moving) => {
        moving.classList.remove("moving");
        moving.classList.add("seized");
    });
    checkEmpty();
    checkMatch();
}
// ÌïúÏ§Ñ Ï†úÍ±∞ÌïòÍ∏∞
function checkMatch() {
    console.log('checkMatch')
    const childNodes = playground.childNodes;
    childNodes.forEach((child) => {
        console.log('check')
        let matched = true;
        child.children[0].childNodes.forEach((li) => {
            if (!li.classList.contains("seized")) {
                matched = false;
            }
        });
        
        if (matched) {
            child.remove();
            prependNewLine();
            tetrisCombo++
            tetrisScore += tetrisCombo;
            console.log("ÏΩ§Î≥¥" +tetrisCombo)
            console.log("Ï†êÏàò" +tetrisScore)
            tetrisNumText.textContent = `${tetrisScore} Ï†ê!`
            tetrisComboText.textContent = `${tetrisCombo} Comboüéà`

        }else{
            console.log("ÏΩ§Î≥¥Ï¥àÍ∏∞Ìôî")
            tetrisCombo--
            tetrisCombo <= 0? tetrisCombo=0:null
            tetrisComboText.textContent = '';
        }
    });
    generateNewBlcok();

}

// ÏÉàÎ°úÏö¥ Î∏îÎü≠ ÎßåÎì§Í∏∞
function generateNewBlcok(desc) {
    if(tetrisEnd){return}

    if(desc == 'end'){
        console.log('generend')
        return;
    }else{
        console.log('generate')
        clearInterval(tetrisDownInterval);
        tetrisDownInterval = setInterval(() => {
            moveBlock("top", 1);
        }, tetrisDuration);

        const blockArray = Object.entries(blocks);
        const tetrisRandomIndex = Math.floor(Math.random() * blockArray.length);

        tetrisMovingItem.type = blockArray[tetrisRandomIndex][0];
        tetrisMovingItem.top = 0;
        tetrisMovingItem.left = 3;
        tetrisMovingItem.direction = 0;
        tetrisTempMovingItem = { ...tetrisMovingItem };
        renderBlocks();
    }
}

// ÎπàÏπ∏ ÌôïÏù∏ÌïòÍ∏∞
function checkEmpty(target) {
    // console.log('checkEmpty')
    if (!target || target.classList.contains("seized")) {
        return;
    }
    return true;
}

// Î∏îÎ°ù ÏõÄÏßÅÏù¥Í∏∞
function moveBlock(moveType, amount) {
    if(tetrisEnd){return}
    else{
        clearInterval(tetrisDownInterval);
        tetrisDownInterval = setInterval(() => {
            moveBlock("top", 1);
        }, tetrisDuration);

        // console.log('moveblock')
        tetrisTempMovingItem[moveType] += amount;
        renderBlocks(moveType);
    }
}

// Î™®Ïñë Î∞îÍæ∏Í∏∞
function changeDerection() {
    if(tetrisEnd){return}

    const direction = tetrisTempMovingItem.direction;
    direction === 3 ? (tetrisTempMovingItem.direction = 0) : (tetrisTempMovingItem.direction += 1);
    renderBlocks();
}
// Îπ®Î¶¨ ÎÇ¥Î¶¨Í∏∞
function dropBlock() {
    if(tetrisEnd){return}
    
    clearInterval(tetrisDownInterval);

    
    tetrisDownInterval = setInterval(() => {
        tetrisTempMovingItem["top"] += 1;
        renderBlocks("top");
    }, 5);
    // tetrisDownInterval = setInterval(() => {
    //     moveBlock("top", 1);
    // }, 3);
}

// Ïù¥Î≤§Ìä∏
document.addEventListener("keydown", (e) => {
    switch (e.keyCode) {
        case 39:
            moveBlock("left", 1);
            break;
        case 37:
            moveBlock("left", -1);
            break;
        case 40:
            moveBlock("top", 1);
            break;
        case 38:
            changeDerection();
            break;
        case 32:
            dropBlock();
            break;

        default:
            break;
    }
});
tetrisStartBtn.addEventListener("click", init);
// init();

function tetrisEndfunc(){
    tetrisEnd = true;
    clearInterval(tetrisDownInterval);
    clearInterval(tetrisDurationTimeout);

}